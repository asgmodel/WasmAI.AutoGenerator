using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace AutoGeneratedClass
{
    [AttributeUsage(AttributeTargets.Class, Inherited = false)]
    public class GenerateDtoAttribute : Attribute
    {
    }

    [AttributeUsage(AttributeTargets.Class, Inherited = false)]
    public class GenerateDsoAttribute : Attribute
    {
    }



    [Generator]
    public class DtoDsoGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var classDeclarations = context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: (s, _) => s is ClassDeclarationSyntax,
                    transform: (ctx, _) => (ClassDeclarationSyntax)ctx.Node
                )
                .Where(cls => cls is not null && HasGenerateDtoDsoAttribute(cls));

            context.RegisterSourceOutput(classDeclarations, (spc, classDeclaration) =>
            {
                if (classDeclaration == null) return;

                var baseClassName = classDeclaration.Identifier.Text;
                var dtoClassName = baseClassName + "Dto";
                var dsoClassName = baseClassName + "Dso";
                var @namespace = GetNamespace(classDeclaration);

                // 🔹 طباعة رسائل أثناء التوليد
                ReportMessage(spc, $"✅ اكتشفنا الكلاس: {baseClassName} في الفضاء {@namespace}");

                // ✅ توليد الكود الجديد
                string dtoSource = GenerateClass(@namespace, dtoClassName, baseClassName);
                string dsoSource = GenerateClass(@namespace, dsoClassName, baseClassName);

                // إضافة الكود المولد في المشروع الحالي
                spc.AddSource($"{dtoClassName}.g.cs", SourceText.From(dtoSource, Encoding.UTF8));
                ReportMessage(spc, $"🎉 تم إنشاء الكلاس: {dtoClassName}");

                spc.AddSource($"{dsoClassName}.g.cs", SourceText.From(dsoSource, Encoding.UTF8));
                ReportMessage(spc, $"🎉 تم إنشاء الكلاس: {dsoClassName}");

                // رسالة لطباعة مكان حفظ الملفات
                ReportMessage(spc, $"⚠️ الملفات تم توليدها في الذاكرة للمشروع وليس في النظام الفعلي.");
            });
        }

        private static bool HasGenerateDtoDsoAttribute(ClassDeclarationSyntax classDeclaration)
        {
            return classDeclaration.AttributeLists
                .SelectMany(attrList => attrList.Attributes)
                .Any(attr => attr.Name.ToString() == "GenerateDto");
        }

        private static string GetNamespace(ClassDeclarationSyntax classDeclaration)
        {
            // يمكنك تحديد فضاء الأسماء هنا بشكل يدوي
            string customNamespace = "maind.Test";  // فضاء أسماء مخصص

            SyntaxNode? parent = classDeclaration.Parent;
            while (parent is not null)
            {
                if (parent is NamespaceDeclarationSyntax namespaceDeclaration)
                {
                    // إذا تم العثور على فضاء الأسماء في الشجرة الأبائية
                    return namespaceDeclaration.Name.ToString();
                }
                parent = parent.Parent;
            }

            // في حال لم يتم العثور على فضاء الأسماء، قم بإرجاع الفضاء المخصص
            return customNamespace;
        }

        private static string GenerateClass(string @namespace, string className, string baseClass)
        {
            return $@"
namespace {@namespace}
{{
    public class {className} : {baseClass}
    {{
    }}
}}";
        }

        private static void ReportMessage(SourceProductionContext context, string message)
        {
            // هنا نضيف التقرير باستخدام Diagnostic 
            var diagnostic = Diagnostic.Create(
                new DiagnosticDescriptor(
                    id: "DTOGEN001",
                    title: "Source Generator Debug",
                    messageFormat: message,
                    category: "SourceGenerator",
                    DiagnosticSeverity.Info,
                    isEnabledByDefault: true),
                Location.None);

            context.ReportDiagnostic(diagnostic);
        }
    }

   
}

